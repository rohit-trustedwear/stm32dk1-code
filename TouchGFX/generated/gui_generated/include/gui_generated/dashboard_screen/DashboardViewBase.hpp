/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef DASHBOARDVIEWBASE_HPP
#define DASHBOARDVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/dashboard_screen/DashboardPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/graph/GraphScroll.hpp>
#include <touchgfx/widgets/graph/GraphElements.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888Bitmap.hpp>
#include <touchgfx/widgets/TextureMapper.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/RadioButton.hpp>
#include <touchgfx/widgets/RadioButtonGroup.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>

class DashboardViewBase : public touchgfx::View<DashboardPresenter>
{
public:
    DashboardViewBase();
    virtual ~DashboardViewBase();
    virtual void setupScreen();

    /*
     * Custom Actions
     */
    virtual void goToMain()
    {
        // Override and implement this function in Screen1
    }
    

    /*
     * Virtual Action Handlers
     */
    virtual void selectMiles()
    {
        // Override and implement this function in Dashboard
    }
    virtual void selectKmh()
    {
        // Override and implement this function in Dashboard
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image background_mi;
    touchgfx::Image background_kmh;
    touchgfx::GraphScroll<205> graph;
    touchgfx::GraphElementLine graphLine1;
    touchgfx::PainterRGB888 graphLine1Painter;
    touchgfx::TextAreaWithOneWildcard currentVelocity;
    touchgfx::TextAreaWithOneWildcard totalDistance;
    touchgfx::TextAreaWithOneWildcard remaining;
    touchgfx::TextArea remainingLabel;
    touchgfx::TextAreaWithOneWildcard elevationLabel;
    touchgfx::Circle highlightMph;
    touchgfx::PainterRGB888Bitmap highlightMphPainter;
    touchgfx::Circle highlightKmh;
    touchgfx::PainterRGB888Bitmap highlightKmhPainter;
    touchgfx::TextureMapper needle;
    touchgfx::Button velocityMiles;
    touchgfx::Button velocityKmh;
    touchgfx::TextArea totalDistanceKm;
    touchgfx::TextArea totalDistanceMi;
    touchgfx::Image battery6;
    touchgfx::Image battery5;
    touchgfx::Image battery4;
    touchgfx::Image battery3;
    touchgfx::Image battery2;
    touchgfx::Image battery1;
    touchgfx::RadioButtonGroup<4> modeGroup;
    touchgfx::RadioButton modeOff;
    touchgfx::RadioButton modeStandard;
    touchgfx::RadioButton modeSport;
    touchgfx::RadioButton modeMax;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  backButton;

    /*
     * Wildcard Buffers
     */
    static const uint16_t CURRENTVELOCITY_SIZE = 3;
    touchgfx::Unicode::UnicodeChar currentVelocityBuffer[CURRENTVELOCITY_SIZE];
    static const uint16_t TOTALDISTANCE_SIZE = 6;
    touchgfx::Unicode::UnicodeChar totalDistanceBuffer[TOTALDISTANCE_SIZE];
    static const uint16_t REMAINING_SIZE = 6;
    touchgfx::Unicode::UnicodeChar remainingBuffer[REMAINING_SIZE];
    static const uint16_t ELEVATIONLABEL_SIZE = 7;
    touchgfx::Unicode::UnicodeChar elevationLabelBuffer[ELEVATIONLABEL_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<DashboardViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<DashboardViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // DASHBOARDVIEWBASE_HPP
