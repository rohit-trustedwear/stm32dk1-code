/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/thermostat_screen/ThermostatViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

ThermostatViewBase::ThermostatViewBase() :
    buttonCallback(this, &ThermostatViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &ThermostatViewBase::flexButtonCallbackHandler)
{
    __background.setPosition(0, 0, 480, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background.setPosition(0, 0, 480, 480);
    background.setColor(touchgfx::Color::getColorFromRGB(138, 86, 200));
    add(background);

    gradient.setXY(0, 0);
    gradient.setBitmap(touchgfx::Bitmap(BITMAP_GRADIENT_BLUE_RED_BACKGROUND_ID));
    add(gradient);

    handle.setXY(0, 0);
    handle.setBitmap(touchgfx::Bitmap(BITMAP_THERMOSTAT_GRADIENT_ID));
    handle.setWidth(480);
    handle.setHeight(480);
    handle.setBitmapPosition(0.0f, 0.0f);
    handle.setScale(1.0f);
    handle.setCameraDistance(1000.0f);
    handle.setOrigo(240.0f, 240.0f, 1000.0f);
    handle.setCamera(240.0f, 240.0f);
    handle.setAngles(0.0f, 0.0f, 0.0f);
    handle.setRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    add(handle);

    fanMotionBlur.setXY(89, 89);
    fanMotionBlur.setBitmap(touchgfx::Bitmap(BITMAP_FAN_MOTION_BLUR_ID));
    fanMotionBlur.setWidth(302);
    fanMotionBlur.setHeight(302);
    fanMotionBlur.setBitmapPosition(0.0f, 0.0f);
    fanMotionBlur.setScale(1.0f);
    fanMotionBlur.setCameraDistance(1000.0f);
    fanMotionBlur.setOrigo(151.0f, 151.0f, 1000.0f);
    fanMotionBlur.setCamera(151.0f, 151.0f);
    fanMotionBlur.setAngles(0.0f, 0.0f, 0.0f);
    fanMotionBlur.setRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    fanMotionBlur.setVisible(false);
    add(fanMotionBlur);

    fan.setXY(89, 89);
    fan.setBitmap(touchgfx::Bitmap(BITMAP_ACTIVE_FAN_OVERLAY_ID));
    fan.setWidth(302);
    fan.setHeight(302);
    fan.setBitmapPosition(0.0f, 0.0f);
    fan.setScale(1.0f);
    fan.setCameraDistance(1000.0f);
    fan.setOrigo(151.0f, 151.0f, 1000.0f);
    fan.setCamera(151.0f, 151.0f);
    fan.setAngles(0.0f, 0.0f, 0.0f);
    fan.setRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    add(fan);

    foreground.setXY(0, 0);
    foreground.setBitmap(touchgfx::Bitmap(BITMAP_FOREGROUND_ID));
    add(foreground);

    buttonFahrenheit.setXY(204, 313);
    buttonFahrenheit.setBitmaps(touchgfx::Bitmap(BITMAP_FAHRENHEIT_CHANGE_UNIT_NORMAL_ID), touchgfx::Bitmap(BITMAP_FAHRENHEIT_CHANGE_UNIT_PRESSED_ID));
    buttonFahrenheit.setAction(buttonCallback);
    add(buttonFahrenheit);

    buttonCelsius.setXY(204, 313);
    buttonCelsius.setBitmaps(touchgfx::Bitmap(BITMAP_CELSIUS_CHANGE_UNIT_NORMAL_ID), touchgfx::Bitmap(BITMAP_CELSIUS_CHANGE_UNIT_PRESSED_ID));
    buttonCelsius.setVisible(false);
    buttonCelsius.setAction(buttonCallback);
    add(buttonCelsius);

    temperatureCurrent.setPosition(89, 113, 172, 200);
    temperatureCurrent.setColor(touchgfx::Color::getColorFromRGB(5, 0, 66));
    temperatureCurrent.setLinespacing(0);
    Unicode::snprintf(temperatureCurrentBuffer, TEMPERATURECURRENT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_MWN2).getText());
    temperatureCurrent.setWildcard(temperatureCurrentBuffer);
    temperatureCurrent.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5H87));
    add(temperatureCurrent);

    temperatureCurrentDot.setPosition(243, 113, 54, 200);
    temperatureCurrentDot.setColor(touchgfx::Color::getColorFromRGB(5, 0, 66));
    temperatureCurrentDot.setLinespacing(0);
    temperatureCurrentDot.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CQWY));
    add(temperatureCurrentDot);

    temperatureCurrentFractional.setPosition(292, 113, 146, 200);
    temperatureCurrentFractional.setColor(touchgfx::Color::getColorFromRGB(5, 0, 66));
    temperatureCurrentFractional.setLinespacing(0);
    Unicode::snprintf(temperatureCurrentFractionalBuffer, TEMPERATURECURRENTFRACTIONAL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_D90K).getText());
    temperatureCurrentFractional.setWildcard(temperatureCurrentFractionalBuffer);
    temperatureCurrentFractional.setTypedText(touchgfx::TypedText(T___SINGLEUSE_H5WB));
    add(temperatureCurrentFractional);

    temperatureNominal.setPosition(199, 40, 83, 34);
    temperatureNominal.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    temperatureNominal.setLinespacing(0);
    Unicode::snprintf(temperatureNominalBuffer, TEMPERATURENOMINAL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_WTII).getText());
    temperatureNominal.setWildcard(temperatureNominalBuffer);
    temperatureNominal.setTypedText(touchgfx::TypedText(T___SINGLEUSE_SU0H));
    add(temperatureNominal);

    backButton.setIconBitmaps(Bitmap(BITMAP_ICON_BACK_24_NORMAL_BLUE_ID), Bitmap(BITMAP_ICON_BACK_24_PRESSED_ID));
    backButton.setIconXY(92, 0);
    backButton.setAction(flexButtonCallback);
    backButton.setPosition(128, 438, 224, 49);
    add(backButton);
}

ThermostatViewBase::~ThermostatViewBase()
{

}

void ThermostatViewBase::setupScreen()
{

}

void ThermostatViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonFahrenheit)
    {
        //selectCelsius
        //When buttonFahrenheit clicked call virtual function
        //Call selectCelsius
        selectCelsius();
    
        //hideFahrenheit
        //When selectCelsius completed hide buttonFahrenheit
        //Hide buttonFahrenheit
        buttonFahrenheit.setVisible(false);
        buttonFahrenheit.invalidate();
    
        //showCelsius
        //When hideFahrenheit completed show buttonCelsius
        //Show buttonCelsius
        buttonCelsius.setVisible(true);
        buttonCelsius.invalidate();
    }
    if (&src == &buttonCelsius)
    {
        //selectFahrenheit
        //When buttonCelsius clicked call virtual function
        //Call selectFahrenheit
        selectFahrenheit();
    
        //hideCelsius
        //When selectFahrenheit completed hide buttonCelsius
        //Hide buttonCelsius
        buttonCelsius.setVisible(false);
        buttonCelsius.invalidate();
    
        //showFahrenheit
        //When hideCelsius completed show buttonFahrenheit
        //Show buttonFahrenheit
        buttonFahrenheit.setVisible(true);
        buttonFahrenheit.invalidate();
    }
}

void ThermostatViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &backButton)
    {
        //ChangeScreenToMain
        //When backButton clicked change screen to Main
        //Go to Main with screen transition towards East
        application().gotoMainScreenWipeTransitionEast();
    }
}
