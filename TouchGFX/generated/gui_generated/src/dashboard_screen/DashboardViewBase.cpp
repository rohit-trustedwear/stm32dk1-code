/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/dashboard_screen/DashboardViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

DashboardViewBase::DashboardViewBase() :
    buttonCallback(this, &DashboardViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &DashboardViewBase::flexButtonCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 480, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background_mi.setXY(-1, 0);
    background_mi.setBitmap(touchgfx::Bitmap(BITMAP_MAIN_BACKGROUND_NUMBERS_MPH_ID));
    add(background_mi);

    background_kmh.setXY(-1, 0);
    background_kmh.setBitmap(touchgfx::Bitmap(BITMAP_MAIN_BACKGROUND_NUMBERS_KMH_ID));
    background_kmh.setVisible(false);
    add(background_kmh);

    graph.setPosition(35, 370, 410, 66);
    graph.setScale(1);
    graph.setGraphAreaMargin(0, 0, 0, 0);
    graph.setGraphAreaPadding(0, 0, 0, 0);
    graph.setGraphRangeY(0, 255);
    graphLine1Painter.setColor(touchgfx::Color::getColorFromRGB(25, 255, 198));
    graphLine1.setPainter(graphLine1Painter);
    graphLine1.setLineWidth(2);
    graph.addGraphElement(graphLine1);


    add(graph);

    currentVelocity.setXY(174, 174);
    currentVelocity.setColor(touchgfx::Color::getColorFromRGB(210, 243, 255));
    currentVelocity.setLinespacing(0);
    Unicode::snprintf(currentVelocityBuffer, CURRENTVELOCITY_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_B6UT).getText());
    currentVelocity.setWildcard(currentVelocityBuffer);
    currentVelocity.resizeToCurrentText();
    currentVelocity.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NANU));
    add(currentVelocity);

    totalDistance.setXY(205, 329);
    totalDistance.setColor(touchgfx::Color::getColorFromRGB(210, 243, 255));
    totalDistance.setLinespacing(0);
    Unicode::snprintf(totalDistanceBuffer, TOTALDISTANCE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_XB5M).getText());
    totalDistance.setWildcard(totalDistanceBuffer);
    totalDistance.resizeToCurrentText();
    totalDistance.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DHPQ));
    add(totalDistance);

    remaining.setXY(37, 323);
    remaining.setColor(touchgfx::Color::getColorFromRGB(210, 243, 255));
    remaining.setLinespacing(0);
    Unicode::snprintf(remainingBuffer, REMAINING_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_49Q7).getText());
    remaining.setWildcard(remainingBuffer);
    remaining.resizeToCurrentText();
    remaining.setTypedText(touchgfx::TypedText(T___SINGLEUSE_QB8T));
    add(remaining);

    remainingLabel.setXY(26, 303);
    remainingLabel.setColor(touchgfx::Color::getColorFromRGB(125, 142, 245));
    remainingLabel.setLinespacing(0);
    remainingLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_1KU2));
    add(remainingLabel);

    elevationLabel.setXY(212, 367);
    elevationLabel.setColor(touchgfx::Color::getColorFromRGB(210, 243, 255));
    elevationLabel.setLinespacing(0);
    Unicode::snprintf(elevationLabelBuffer, ELEVATIONLABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_52Q4).getText());
    elevationLabel.setWildcard(elevationLabelBuffer);
    elevationLabel.resizeToCurrentText();
    elevationLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_53CM));
    add(elevationLabel);

    highlightMph.setPosition(0, 0, 480, 480);
    highlightMph.setCenter(240, 240);
    highlightMph.setRadius(186);
    highlightMph.setLineWidth(108);
    highlightMph.setArc(-90, -57);
    highlightMph.setCapPrecision(180);
    highlightMphPainter.setBitmap(touchgfx::Bitmap(BITMAP_SPEEDOMETER_FILL_OVERLAY_NUMBERS_MPH_ID));
    highlightMph.setPainter(highlightMphPainter);
    add(highlightMph);

    highlightKmh.setPosition(0, 0, 480, 480);
    highlightKmh.setCenter(240, 240);
    highlightKmh.setRadius(186);
    highlightKmh.setLineWidth(108);
    highlightKmh.setArc(-90, -57);
    highlightKmh.setCapPrecision(180);
    highlightKmhPainter.setBitmap(touchgfx::Bitmap(BITMAP_SPEEDOMETER_FILL_OVERLAY_NUMBERS_KMH_ID));
    highlightKmh.setPainter(highlightKmhPainter);
    highlightKmh.setVisible(false);
    add(highlightKmh);

    needle.setXY(0, 0);
    needle.setBitmap(touchgfx::Bitmap(BITMAP_SPEEDOMETER_NEEDLE_ID));
    needle.setWidth(480);
    needle.setHeight(240);
    needle.setBitmapPosition(214.0f, 0.0f);
    needle.setScale(1.0f);
    needle.setCameraDistance(1000.0f);
    needle.setOrigo(240.0f, 240.0f, 1000.0f);
    needle.setCamera(240.0f, 120.0f);
    needle.setAngles(0.0f, 0.0f, -1.0f);
    needle.setRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    add(needle);

    velocityMiles.setXY(201, 139);
    velocityMiles.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_MPH_NORMAL_ID), touchgfx::Bitmap(BITMAP_BUTTON_MPH_PRESSED_ID));
    velocityMiles.setAction(buttonCallback);
    add(velocityMiles);

    velocityKmh.setXY(201, 139);
    velocityKmh.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_KMH_NORMAL_ID), touchgfx::Bitmap(BITMAP_BUTTON_KMH_PRESSED_ID));
    velocityKmh.setVisible(false);
    velocityKmh.setAction(buttonCallback);
    add(velocityKmh);

    totalDistanceKm.setXY(213, 303);
    totalDistanceKm.setColor(touchgfx::Color::getColorFromRGB(125, 142, 245));
    totalDistanceKm.setLinespacing(0);
    totalDistanceKm.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CKZ2));
    totalDistanceKm.setVisible(false);
    add(totalDistanceKm);

    totalDistanceMi.setXY(213, 304);
    totalDistanceMi.setColor(touchgfx::Color::getColorFromRGB(125, 142, 245));
    totalDistanceMi.setLinespacing(0);
    totalDistanceMi.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JP0H));
    add(totalDistanceMi);

    battery6.setXY(31, 263);
    battery6.setBitmap(touchgfx::Bitmap(BITMAP_BATTERY_STEPS_FULL_ID));
    add(battery6);

    battery5.setXY(31, 263);
    battery5.setBitmap(touchgfx::Bitmap(BITMAP_BATTERY_STEPS_5OF6_ID));
    battery5.setVisible(false);
    add(battery5);

    battery4.setXY(31, 263);
    battery4.setBitmap(touchgfx::Bitmap(BITMAP_BATTERY_STEPS_4OF6_ID));
    battery4.setVisible(false);
    add(battery4);

    battery3.setXY(31, 264);
    battery3.setBitmap(touchgfx::Bitmap(BITMAP_BATTERY_STEPS_3OF6_ID));
    battery3.setVisible(false);
    add(battery3);

    battery2.setXY(31, 263);
    battery2.setBitmap(touchgfx::Bitmap(BITMAP_BATTERY_STEPS_2OF6_ID));
    battery2.setVisible(false);
    add(battery2);

    battery1.setXY(31, 263);
    battery1.setBitmap(touchgfx::Bitmap(BITMAP_BATTERY_STEPS_LOW_ID));
    battery1.setVisible(false);
    add(battery1);

    modeOff.setXY(302, 334);
    modeOff.setBitmaps(touchgfx::Bitmap(BITMAP_MODE_OFF_INACTIVE_ID), touchgfx::Bitmap(BITMAP_MODE_OFF_ACTIVE_ID), touchgfx::Bitmap(BITMAP_MODE_OFF_ACTIVE_ID), touchgfx::Bitmap(BITMAP_MODE_OFF_ACTIVE_ID));
    modeOff.setSelected(false);
    modeOff.setDeselectionEnabled(false);
    modeGroup.add(modeOff);
    add(modeOff);

    modeStandard.setXY(319, 303);
    modeStandard.setBitmaps(touchgfx::Bitmap(BITMAP_MODE_STANDARD_INACTIVE_ID), touchgfx::Bitmap(BITMAP_MODE_STANDARD_ACTIVE_ID), touchgfx::Bitmap(BITMAP_MODE_STANDARD_ACTIVE_ID), touchgfx::Bitmap(BITMAP_MODE_STANDARD_ACTIVE_ID));
    modeStandard.setSelected(true);
    modeStandard.setDeselectionEnabled(false);
    modeGroup.add(modeStandard);
    add(modeStandard);

    modeSport.setXY(345, 272);
    modeSport.setBitmaps(touchgfx::Bitmap(BITMAP_MODE_SPORT_INACTIVE_ID), touchgfx::Bitmap(BITMAP_MODE_SPORT_ACTIVE_ID), touchgfx::Bitmap(BITMAP_MODE_SPORT_ACTIVE_ID), touchgfx::Bitmap(BITMAP_MODE_SPORT_ACTIVE_ID));
    modeSport.setSelected(false);
    modeSport.setDeselectionEnabled(false);
    modeGroup.add(modeSport);
    add(modeSport);

    modeMax.setXY(358, 240);
    modeMax.setBitmaps(touchgfx::Bitmap(BITMAP_MODE_MAX_INACTIVE_ID), touchgfx::Bitmap(BITMAP_MODE_MAX_ACTIVE_ID), touchgfx::Bitmap(BITMAP_MODE_MAX_ACTIVE_ID), touchgfx::Bitmap(BITMAP_MODE_MAX_ACTIVE_ID));
    modeMax.setSelected(false);
    modeMax.setDeselectionEnabled(false);
    modeGroup.add(modeMax);
    add(modeMax);

    backButton.setIconBitmaps(Bitmap(BITMAP_ICON_BACK_24_NORMAL_ID), Bitmap(BITMAP_ICON_BACK_24_PRESSED_ID));
    backButton.setIconXY(92, 0);
    backButton.setAction(flexButtonCallback);
    backButton.setPosition(128, 442, 217, 38);
    add(backButton);
}

DashboardViewBase::~DashboardViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void DashboardViewBase::setupScreen()
{

}

void DashboardViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &velocityKmh)
    {
        //selectMiles
        //When velocityKmh clicked call virtual function
        //Call selectMiles
        selectMiles();
    
        //hideKmhButton
        //When selectMiles completed hide velocityKmh
        //Hide velocityKmh
        velocityKmh.setVisible(false);
        velocityKmh.invalidate();
    
    
        //showMilesButton
        //When selectMiles completed show velocityMiles
        //Show velocityMiles
        velocityMiles.setVisible(true);
        velocityMiles.invalidate();
    
    
        //showTotalDistanceMiles
        //When selectMiles completed show totalDistanceMi
        //Show totalDistanceMi
        totalDistanceMi.setVisible(true);
        totalDistanceMi.invalidate();
    
    
        //hideTotalDistanceKm
        //When selectMiles completed hide totalDistanceKm
        //Hide totalDistanceKm
        totalDistanceKm.setVisible(false);
        totalDistanceKm.invalidate();
    
    
        //showBackgroundMi
        //When selectMiles completed show background_mi
        //Show background_mi
        background_mi.setVisible(true);
        background_mi.invalidate();
    
    
        //hideBackgroundKm
        //When selectMiles completed hide background_kmh
        //Hide background_kmh
        background_kmh.setVisible(false);
        background_kmh.invalidate();
    
    
        //hideHighlightKmh
        //When selectMiles completed hide highlightKmh
        //Hide highlightKmh
        highlightKmh.setVisible(false);
        highlightKmh.invalidate();
    
    
        //showHighlightMph
        //When selectMiles completed show highlightMph
        //Show highlightMph
        highlightMph.setVisible(true);
        highlightMph.invalidate();
    }
    if (&src == &velocityMiles)
    {
        //selectKmh
        //When velocityMiles clicked call virtual function
        //Call selectKmh
        selectKmh();
    
        //hideMilesButton
        //When selectKmh completed hide velocityMiles
        //Hide velocityMiles
        velocityMiles.setVisible(false);
        velocityMiles.invalidate();
    
    
        //showKmhButton
        //When selectKmh completed show velocityKmh
        //Show velocityKmh
        velocityKmh.setVisible(true);
        velocityKmh.invalidate();
    
    
        //showTotalDistanceKm
        //When selectKmh completed show totalDistanceKm
        //Show totalDistanceKm
        totalDistanceKm.setVisible(true);
        totalDistanceKm.invalidate();
    
    
        //hideTotalDistanceMi
        //When selectKmh completed hide totalDistanceMi
        //Hide totalDistanceMi
        totalDistanceMi.setVisible(false);
        totalDistanceMi.invalidate();
    
    
        //showBackgroundKmh
        //When selectKmh completed show background_kmh
        //Show background_kmh
        background_kmh.setVisible(true);
        background_kmh.invalidate();
    
    
        //hideBackGroundMi
        //When selectKmh completed hide background_mi
        //Hide background_mi
        background_mi.setVisible(false);
        background_mi.invalidate();
    
    
        //showHighlightKmh
        //When selectKmh completed show highlightKmh
        //Show highlightKmh
        highlightKmh.setVisible(true);
        highlightKmh.invalidate();
    
    
        //hideHighlightMph
        //When selectKmh completed hide highlightMph
        //Hide highlightMph
        highlightMph.setVisible(false);
        highlightMph.invalidate();
    }
}

void DashboardViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &backButton)
    {
        //ChangeScreenToMain
        //When backButton clicked change screen to Main
        //Go to Main with screen transition towards East
        application().gotoMainScreenWipeTransitionEast();
    }
}
